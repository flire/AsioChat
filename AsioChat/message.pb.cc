// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ru {
namespace spbau {
namespace chat {
namespace commons {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Message_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_2eproto() {
  protobuf_AddDesc_message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message.proto");
  GOOGLE_CHECK(file != NULL);
  Message_descriptor_ = file->message_type(0);
  static const int Message_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, author_),
  };
  Message_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_[0]),
      -1,
      -1,
      sizeof(Message),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _internal_metadata_),
      -1);
  Message_Type_descriptor_ = Message_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Message_descriptor_, &Message::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_2eproto() {
  delete Message::default_instance_;
  delete Message_reflection_;
}

void protobuf_AddDesc_message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmessage.proto\022\036ru.spbau.chat.commons.p"
    "rotocol\"\205\001\n\007Message\022:\n\004type\030\002 \002(\0162,.ru.s"
    "pbau.chat.commons.protocol.Message.Type\022"
    "\014\n\004text\030\003 \003(\t\022\016\n\006author\030\004 \001(\t\" \n\004Type\022\013\n"
    "\007COMMAND\020\001\022\013\n\007MESSAGE\020\002", 183);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  Message::default_instance_ = new Message();
  Message::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_2eproto {
  StaticDescriptorInitializer_message_2eproto() {
    protobuf_AddDesc_message_2eproto();
  }
} static_descriptor_initializer_message_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* Message_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_Type_descriptor_;
}
bool Message_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Message_Type Message::COMMAND;
const Message_Type Message::MESSAGE;
const Message_Type Message::Type_MIN;
const Message_Type Message::Type_MAX;
const int Message::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message::kTypeFieldNumber;
const int Message::kTextFieldNumber;
const int Message::kAuthorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message::Message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ru.spbau.chat.commons.protocol.Message)
}

void Message::InitAsDefaultInstance() {
}

Message::Message(const Message& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ru.spbau.chat.commons.protocol.Message)
}

void Message::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  author_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:ru.spbau.chat.commons.protocol.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  author_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New(::google::protobuf::Arena* arena) const {
  Message* n = new Message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Message::Clear() {
  if (_has_bits_[0 / 32] & 5u) {
    type_ = 1;
    if (has_author()) {
      author_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  text_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ru.spbau.chat.commons.protocol.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ru.spbau.chat.commons.protocol.Message.Type type = 2;
      case 2: {
        if (tag == 16) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ru::spbau::chat::commons::protocol::Message_Type_IsValid(value)) {
            set_type(static_cast< ::ru::spbau::chat::commons::protocol::Message_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_text;
        break;
      }

      // repeated string text = 3;
      case 3: {
        if (tag == 26) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text(this->text_size() - 1).data(),
            this->text(this->text_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.spbau.chat.commons.protocol.Message.text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_text;
        if (input->ExpectTag(34)) goto parse_author;
        break;
      }

      // optional string author = 4;
      case 4: {
        if (tag == 34) {
         parse_author:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_author()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->author().data(), this->author().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ru.spbau.chat.commons.protocol.Message.author");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ru.spbau.chat.commons.protocol.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ru.spbau.chat.commons.protocol.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ru.spbau.chat.commons.protocol.Message)
  // required .ru.spbau.chat.commons.protocol.Message.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // repeated string text = 3;
  for (int i = 0; i < this->text_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text(i).data(), this->text(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.spbau.chat.commons.protocol.Message.text");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->text(i), output);
  }

  // optional string author = 4;
  if (has_author()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->author().data(), this->author().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.spbau.chat.commons.protocol.Message.author");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->author(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ru.spbau.chat.commons.protocol.Message)
}

::google::protobuf::uint8* Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ru.spbau.chat.commons.protocol.Message)
  // required .ru.spbau.chat.commons.protocol.Message.Type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // repeated string text = 3;
  for (int i = 0; i < this->text_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text(i).data(), this->text(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.spbau.chat.commons.protocol.Message.text");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->text(i), target);
  }

  // optional string author = 4;
  if (has_author()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->author().data(), this->author().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ru.spbau.chat.commons.protocol.Message.author");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->author(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ru.spbau.chat.commons.protocol.Message)
  return target;
}

int Message::ByteSize() const {
  int total_size = 0;

  // required .ru.spbau.chat.commons.protocol.Message.Type type = 2;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  // optional string author = 4;
  if (has_author()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->author());
  }

  // repeated string text = 3;
  total_size += 1 * this->text_size();
  for (int i = 0; i < this->text_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->text(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Message* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Message>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  text_.MergeFrom(from.text_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_author()) {
      set_has_author();
      author_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.author_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Message::Swap(Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message::InternalSwap(Message* other) {
  std::swap(type_, other->type_);
  text_.UnsafeArenaSwap(&other->text_);
  author_.Swap(&other->author_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Message

// required .ru.spbau.chat.commons.protocol.Message.Type type = 2;
bool Message::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Message::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Message::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Message::clear_type() {
  type_ = 1;
  clear_has_type();
}
 ::ru::spbau::chat::commons::protocol::Message_Type Message::type() const {
  // @@protoc_insertion_point(field_get:ru.spbau.chat.commons.protocol.Message.type)
  return static_cast< ::ru::spbau::chat::commons::protocol::Message_Type >(type_);
}
 void Message::set_type(::ru::spbau::chat::commons::protocol::Message_Type value) {
  assert(::ru::spbau::chat::commons::protocol::Message_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.spbau.chat.commons.protocol.Message.type)
}

// repeated string text = 3;
int Message::text_size() const {
  return text_.size();
}
void Message::clear_text() {
  text_.Clear();
}
 const ::std::string& Message::text(int index) const {
  // @@protoc_insertion_point(field_get:ru.spbau.chat.commons.protocol.Message.text)
  return text_.Get(index);
}
 ::std::string* Message::mutable_text(int index) {
  // @@protoc_insertion_point(field_mutable:ru.spbau.chat.commons.protocol.Message.text)
  return text_.Mutable(index);
}
 void Message::set_text(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.spbau.chat.commons.protocol.Message.text)
  text_.Mutable(index)->assign(value);
}
 void Message::set_text(int index, const char* value) {
  text_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.spbau.chat.commons.protocol.Message.text)
}
 void Message::set_text(int index, const char* value, size_t size) {
  text_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.spbau.chat.commons.protocol.Message.text)
}
 ::std::string* Message::add_text() {
  return text_.Add();
}
 void Message::add_text(const ::std::string& value) {
  text_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.spbau.chat.commons.protocol.Message.text)
}
 void Message::add_text(const char* value) {
  text_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.spbau.chat.commons.protocol.Message.text)
}
 void Message::add_text(const char* value, size_t size) {
  text_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.spbau.chat.commons.protocol.Message.text)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Message::text() const {
  // @@protoc_insertion_point(field_list:ru.spbau.chat.commons.protocol.Message.text)
  return text_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Message::mutable_text() {
  // @@protoc_insertion_point(field_mutable_list:ru.spbau.chat.commons.protocol.Message.text)
  return &text_;
}

// optional string author = 4;
bool Message::has_author() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Message::set_has_author() {
  _has_bits_[0] |= 0x00000004u;
}
void Message::clear_has_author() {
  _has_bits_[0] &= ~0x00000004u;
}
void Message::clear_author() {
  author_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_author();
}
 const ::std::string& Message::author() const {
  // @@protoc_insertion_point(field_get:ru.spbau.chat.commons.protocol.Message.author)
  return author_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message::set_author(const ::std::string& value) {
  set_has_author();
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.spbau.chat.commons.protocol.Message.author)
}
 void Message::set_author(const char* value) {
  set_has_author();
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.spbau.chat.commons.protocol.Message.author)
}
 void Message::set_author(const char* value, size_t size) {
  set_has_author();
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.spbau.chat.commons.protocol.Message.author)
}
 ::std::string* Message::mutable_author() {
  set_has_author();
  // @@protoc_insertion_point(field_mutable:ru.spbau.chat.commons.protocol.Message.author)
  return author_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Message::release_author() {
  clear_has_author();
  return author_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message::set_allocated_author(::std::string* author) {
  if (author != NULL) {
    set_has_author();
  } else {
    clear_has_author();
  }
  author_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), author);
  // @@protoc_insertion_point(field_set_allocated:ru.spbau.chat.commons.protocol.Message.author)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace commons
}  // namespace chat
}  // namespace spbau
}  // namespace ru

// @@protoc_insertion_point(global_scope)
