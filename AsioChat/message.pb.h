// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto__INCLUDED
#define PROTOBUF_message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ru {
namespace spbau {
namespace chat {
namespace commons {
namespace protocol {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_message_2eproto();
void protobuf_AssignDesc_message_2eproto();
void protobuf_ShutdownFile_message_2eproto();

class Message;

enum Message_Type {
  Message_Type_COMMAND = 1,
  Message_Type_MESSAGE = 2
};
bool Message_Type_IsValid(int value);
const Message_Type Message_Type_Type_MIN = Message_Type_COMMAND;
const Message_Type Message_Type_Type_MAX = Message_Type_MESSAGE;
const int Message_Type_Type_ARRAYSIZE = Message_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Message_Type_descriptor();
inline const ::std::string& Message_Type_Name(Message_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Message_Type_descriptor(), value);
}
inline bool Message_Type_Parse(
    const ::std::string& name, Message_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message_Type>(
    Message_Type_descriptor(), name, value);
}
// ===================================================================

class Message : public ::google::protobuf::Message {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  void Swap(Message* other);

  // implements Message ----------------------------------------------

  inline Message* New() const { return New(NULL); }

  Message* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Message_Type Type;
  static const Type COMMAND = Message_Type_COMMAND;
  static const Type MESSAGE = Message_Type_MESSAGE;
  static inline bool Type_IsValid(int value) {
    return Message_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Message_Type_Type_MIN;
  static const Type Type_MAX =
    Message_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Message_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Message_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Message_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Message_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .ru.spbau.chat.commons.protocol.Message.Type type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::ru::spbau::chat::commons::protocol::Message_Type type() const;
  void set_type(::ru::spbau::chat::commons::protocol::Message_Type value);

  // repeated string text = 3;
  int text_size() const;
  void clear_text();
  static const int kTextFieldNumber = 3;
  const ::std::string& text(int index) const;
  ::std::string* mutable_text(int index);
  void set_text(int index, const ::std::string& value);
  void set_text(int index, const char* value);
  void set_text(int index, const char* value, size_t size);
  ::std::string* add_text();
  void add_text(const ::std::string& value);
  void add_text(const char* value);
  void add_text(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& text() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_text();

  // optional string author = 4;
  bool has_author() const;
  void clear_author();
  static const int kAuthorFieldNumber = 4;
  const ::std::string& author() const;
  void set_author(const ::std::string& value);
  void set_author(const char* value);
  void set_author(const char* value, size_t size);
  ::std::string* mutable_author();
  ::std::string* release_author();
  void set_allocated_author(::std::string* author);

  // @@protoc_insertion_point(class_scope:ru.spbau.chat.commons.protocol.Message)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_author();
  inline void clear_has_author();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> text_;
  ::google::protobuf::internal::ArenaStringPtr author_;
  int type_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static Message* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Message

// required .ru.spbau.chat.commons.protocol.Message.Type type = 2;
inline bool Message::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::ru::spbau::chat::commons::protocol::Message_Type Message::type() const {
  // @@protoc_insertion_point(field_get:ru.spbau.chat.commons.protocol.Message.type)
  return static_cast< ::ru::spbau::chat::commons::protocol::Message_Type >(type_);
}
inline void Message::set_type(::ru::spbau::chat::commons::protocol::Message_Type value) {
  assert(::ru::spbau::chat::commons::protocol::Message_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ru.spbau.chat.commons.protocol.Message.type)
}

// repeated string text = 3;
inline int Message::text_size() const {
  return text_.size();
}
inline void Message::clear_text() {
  text_.Clear();
}
inline const ::std::string& Message::text(int index) const {
  // @@protoc_insertion_point(field_get:ru.spbau.chat.commons.protocol.Message.text)
  return text_.Get(index);
}
inline ::std::string* Message::mutable_text(int index) {
  // @@protoc_insertion_point(field_mutable:ru.spbau.chat.commons.protocol.Message.text)
  return text_.Mutable(index);
}
inline void Message::set_text(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ru.spbau.chat.commons.protocol.Message.text)
  text_.Mutable(index)->assign(value);
}
inline void Message::set_text(int index, const char* value) {
  text_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ru.spbau.chat.commons.protocol.Message.text)
}
inline void Message::set_text(int index, const char* value, size_t size) {
  text_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ru.spbau.chat.commons.protocol.Message.text)
}
inline ::std::string* Message::add_text() {
  return text_.Add();
}
inline void Message::add_text(const ::std::string& value) {
  text_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ru.spbau.chat.commons.protocol.Message.text)
}
inline void Message::add_text(const char* value) {
  text_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ru.spbau.chat.commons.protocol.Message.text)
}
inline void Message::add_text(const char* value, size_t size) {
  text_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ru.spbau.chat.commons.protocol.Message.text)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Message::text() const {
  // @@protoc_insertion_point(field_list:ru.spbau.chat.commons.protocol.Message.text)
  return text_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Message::mutable_text() {
  // @@protoc_insertion_point(field_mutable_list:ru.spbau.chat.commons.protocol.Message.text)
  return &text_;
}

// optional string author = 4;
inline bool Message::has_author() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Message::set_has_author() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Message::clear_has_author() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Message::clear_author() {
  author_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_author();
}
inline const ::std::string& Message::author() const {
  // @@protoc_insertion_point(field_get:ru.spbau.chat.commons.protocol.Message.author)
  return author_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_author(const ::std::string& value) {
  set_has_author();
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ru.spbau.chat.commons.protocol.Message.author)
}
inline void Message::set_author(const char* value) {
  set_has_author();
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ru.spbau.chat.commons.protocol.Message.author)
}
inline void Message::set_author(const char* value, size_t size) {
  set_has_author();
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ru.spbau.chat.commons.protocol.Message.author)
}
inline ::std::string* Message::mutable_author() {
  set_has_author();
  // @@protoc_insertion_point(field_mutable:ru.spbau.chat.commons.protocol.Message.author)
  return author_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message::release_author() {
  clear_has_author();
  return author_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_author(::std::string* author) {
  if (author != NULL) {
    set_has_author();
  } else {
    clear_has_author();
  }
  author_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), author);
  // @@protoc_insertion_point(field_set_allocated:ru.spbau.chat.commons.protocol.Message.author)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace commons
}  // namespace chat
}  // namespace spbau
}  // namespace ru

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ru::spbau::chat::commons::protocol::Message_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ru::spbau::chat::commons::protocol::Message_Type>() {
  return ::ru::spbau::chat::commons::protocol::Message_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2eproto__INCLUDED
